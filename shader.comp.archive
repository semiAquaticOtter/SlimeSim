#version 460 core



    // testing sensor...
    // float saop = agentAngle + senseAngleRad;
    // float saom = agentAngle - senseAngleRad;
    // vec2 sc1 = sensorOffsetDist*vec2(cos(saop),sin(saop));
    // vec2 sc2 = sensorOffsetDist*vec2(cos(saom),sin(saom));

    // // ivec2 cd = ivec2((agentPosition+sc1)*vec2(width, height));
    // ivec2 cd1 = ivec2(pixCoord+sc1);
    // ivec2 cd2 = ivec2(pixCoord+sc2);
    // imageStore(trailmap, cd1, c2);
    // imageStore(trailmap, cd2, c2);







layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, rgba32f) uniform image2D trailmap;

layout(std140, binding = 1) buffer AgentsBuffer {
    vec3 data[];
};

uniform int width;  
uniform int height;
uniform float deltaTime;
uniform int numAgents;
//uniform float dimStrength;
vec4 colour = vec4(1.0, 1.0, 1.0, 1.0);

float sensorAngleOffset = 45;
float sensorOffsetDist = 5;
int sensorSize = 3;
float turnspeed = 10*(2*3.14159);

float dimStrength = 0.0004;
float diffuseWeight = .4;


uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}



//ANCHOR - sense
float sense(vec3 agent, float offset, int sensorSize, ivec2 pc) {
    float sensorAngle = agent.z + offset;
    vec2 dir = vec2(cos(sensorAngle),sin(sensorAngle));
    vec2 pos = agent.xy + dir * sensorOffsetDist;

    float agentTurn;

    for (int senseX = -sensorSize; senseX <= sensorSize; senseX ++) {
        for (int senseY = -sensorSize; senseY <= sensorSize; senseY ++) {
            agentTurn += dot(vec4(2.0), imageLoad(trailmap, ivec2(pos.x + senseX, pos.y + senseY)));
        }
    }

    return agentTurn;
}



void main() {
    uvec3 id = gl_GlobalInvocationID;
    ivec2 pc = ivec2(gl_GlobalInvocationID.xy);
    if (id.x < 0 || id.x >= width || id.y >= height){return;}

    float agentAngle = mod(data[id.x].z, 2.0 * 3.14159265359);
    vec2 agentPosition = data[id.x].xy;

    // dim the whole image
    vec4 currentCol = imageLoad(trailmap, pc);
    // vec4 dakenedColor = vec4(currentCol.rgb * dimStrength, 1.0);
    // blur the whole image
    vec4 sum;
    for (int x = -1; x <= 1; x ++) {
        for (int y = -1; y <= 1; y ++) {
            int sx = min(width-1, max(0, pc.x + x));
            int sy = min(height-1, max(0, pc.y + y));
            sum += imageLoad(trailmap, ivec2(sx, sy));
        }
    }

    vec4 blurCol = sum / 9;
    // blurCol = currentCol * (1-diffuseWeight) + blurCol * (diffuseWeight);
    blurCol = mix(currentCol, blurCol, 0.13);
    blurCol = vec4(vec3(max(0, blurCol.x - dimStrength)), 1.0);
    imageStore(trailmap, pc, vec4(blurCol.xyz, 1.0));

    uint random = hash(uint(data[id.x].x * data[id.x].x / id.x));

    //ANCHOR - checks
    float senseAngleRad = sensorAngleOffset * (3.1415 / 180);
    float wf = sense(data[id.x].xyz, 0, sensorSize, pc);
    float wl = sense(data[id.x].xyz, senseAngleRad, sensorSize, pc);
    float wr = sense(data[id.x].xyz, -senseAngleRad, sensorSize, pc);

    if (wf > wl && wf > wr) {
        agentAngle += 0;
    }
    else if (wf < wl && wf < wr) {
        agentAngle += 0;
    }
    else if (wr < wl) {
        // data[id.x].z -= randomSteerStrength * turnspeed;
        agentAngle -= turnspeed * deltaTime;
    }
    else if (wr > wl) {
        // data[id.x].z += randomSteerStrength * turnspeed;
        agentAngle += turnspeed * deltaTime;
    }

    // get direction and calculate new position
    vec2 direction = vec2(cos(agentAngle), sin(agentAngle));
    vec2 newPos = agentPosition + direction * vec2(0.01) * deltaTime;

    // write agent to screen
    ivec2 pixCoord = ivec2(agentPosition * vec2(width, height));
    imageStore(trailmap, pixCoord, colour);

    // check if agent is past the edge of the screen
    if (newPos.x >= 1 || newPos.x <= 0) {
        agentAngle = 3.14159265359 - data[id.x].z;
    }
    if (newPos.y <= 0 || newPos.y >= 1) {
        agentAngle = data[id.x].z - 2.0 * dot(data[id.x].z, 1) * 1;
    }

    // update agent
    data[id.x].x = newPos.x;
    data[id.x].y = newPos.y;
    data[id.x].z = agentAngle;  
}