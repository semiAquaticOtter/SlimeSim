#version 460 core

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, rgba32f) uniform image2D trailmap;

layout(std140, binding = 1) buffer AgentsBuffer {
    vec3 data[];
};

uniform int width;  
uniform int height;
uniform float deltaTime;
uniform int numAgents;
//uniform float dimStrength;
vec4 colour = vec4(1.0, 1.0, 1.0, 1.0);
vec4 c2 = vec4(1.0, 0.0, 0.0, 0.5);
vec4 c3 = vec4(0.0, 0.0, 1.0, 0.5);

float sensorAngleOffset = 45;
float sensorOffsetDist = 15;
int sensorSize = 3;
float turnspeed = 100*(3.14159/180);

float dimStrength = 0.0009;
float diffuseWeight = .13;

// Hash function www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}


float sense(vec2 agent, float angle, float offset, int sensorSize, ivec2 pc, vec4 col) {
    float sr = offset * (3.1415 / 180);

    float sao = sr + angle;
    vec2 sc1 = sensorOffsetDist*vec2(cos(sao),sin(sao));

    // ivec2 cd1 = ivec2(agent.x + sc1.x, agent.y + sc1.y);
    ivec2 cd1 = ivec2(pc+sc1);
    // imageStore(trailmap, cd1, vec4(0.0, 0.0, 1.0, 1.0));
    

    float agentTurn = 0;

    for (int senseX = -sensorSize; senseX <= sensorSize; senseX ++) {
        for (int senseY = -sensorSize; senseY <= sensorSize; senseY ++) {
            // agentTurn += imageLoad(trailmap, ivec2(cd1.x + senseX, cd1.y + senseY)).x;
            agentTurn += dot(vec4(0.5), imageLoad(trailmap, ivec2(cd1.x + senseX, cd1.y + senseY)));
            // imageStore(trailmap, ivec2(cd1.x + senseX, cd1.y + senseY), col);
        }
    }

    return agentTurn;
}




void main() {
    uvec3 id = gl_GlobalInvocationID;
    ivec2 pc = ivec2(gl_GlobalInvocationID.xy);
    if (id.x < 0 || id.x >= width || id.y >= height){return;}

    float agentAngle = mod(data[id.x].z, 2.0 * 3.14159265359);
    vec2 agentPosition = data[id.x].xy;

    vec4 currentCol = imageLoad(trailmap, pc);

    ivec2 pixCoord = ivec2(agentPosition * vec2(width, height));

    vec4 sum;
    for (int x = -1; x <= 1; x ++) {
        for (int y = -1; y <= 1; y ++) {
            int sx = min(width-1, max(0, pc.x + x));
            int sy = min(height-1, max(0, pc.y + y));
            sum += imageLoad(trailmap, ivec2(sx, sy));
        }
    }

    vec4 blurCol = sum / 9;
    blurCol = mix(currentCol, blurCol, diffuseWeight);
    blurCol = vec4(
        max(0, blurCol.x - dimStrength),
        max(0, blurCol.y - dimStrength),
        max(0, blurCol.z - dimStrength), 
        1.0
    );
    imageStore(trailmap, pc, vec4(blurCol.xyz, 1.0));

    

    uint random = hash(uint(data[id.x].x * data[id.x].x / id.x));
    float randSteer = scaleToRange01(random);

    float wf = sense(agentPosition, agentAngle,                 0,  sensorSize, pixCoord, vec4(0.0));
    float wl = sense(agentPosition, agentAngle, sensorAngleOffset,  sensorSize, pixCoord, vec4(1.0));
    float wr = sense(agentPosition, agentAngle, -sensorAngleOffset, sensorSize, pixCoord, vec4(0.0));

    if (wf > wl && wf > wr) {
        agentAngle += 0;
    }
    else if (wf < wl && wf < wr) {
        agentAngle += 0;
    }
    else if (wr < wl) {
        data[id.x].z += turnspeed * randSteer * deltaTime;
        // agentAngle += turnspeed * deltaTime;
    }
    else if (wr > wl) {
        data[id.x].z -= turnspeed * randSteer * deltaTime;
        // agentAngle -= turnspeed * deltaTime;
    }

    // get direction and calculate new position
    vec2 direction = vec2(cos(agentAngle), sin(agentAngle));
    vec2 newPos = agentPosition + direction*deltaTime * vec2(0.03);
    
    // write agent to screen
    pixCoord = ivec2(agentPosition * vec2(width, height));
    imageStore(trailmap, pixCoord, colour);

    // check if agent is past the edge of the screen
    if (newPos.x >= 1 || newPos.x <= 0) {
        agentAngle = 3.14159265359 - data[id.x].z;
    }
    if (newPos.y <= 0 || newPos.y >= 1) {
        agentAngle = data[id.x].z - 2.0 * dot(data[id.x].z, 1) * 1;
    }

    data[id.x].x = newPos.x;
    data[id.x].y = newPos.y;
    data[id.x].z = agentAngle; 
}